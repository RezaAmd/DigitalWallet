@{
    ViewData["Title"] = "Wallets manage";
    Layout = "~/Areas/Manage/Views/Shared/_Layout.cshtml";
}
<h1><i class="fa fa-wallet"></i> Wallet manager</h1>

<table class="table table-borderless table-striped mt-3">
    <thead>
        <tr>
            <th>Seed</th>
            <th>Creation Date</th>
            <th>Owner</th>
        </tr>
    </thead>
    <tbody class="small">
        @* Loading *@
        <tr v-if="wallets.state === 0">
            <td class="text-center" colspan="6">Loading ...</td>
        </tr>
        @* Loaded succedd *@
        <tr v-if="wallets.state === 200" v-for="wallet in wallets.list">
            <td>{{wallet.seed}}</td>
            <td><span v-bind:title="wallet.createdDateTime.persianDateTime">{{wallet.createdDateTime.dateTime}}</span></td>
            <td>{{wallet.owner ? wallet.owner.name : ''}} {{wallet.owner ? wallet.owner.surname : ''}}</td>
            <td></td>
        </tr>
        @* Not Found *@
        <tr v-else>
            <td class="text-center" colspan="6">No items found!</td>
        </tr>
    </tbody>
</table>

@section Scripts {
    <script>
        var app = new Vue({
            el: '#app',
            mounted: async function() {
                await this.getWallets();
            },
            data: {
                wallets: {
                    state: 0,
                    list: []
                }
            },
            methods: {
                getWallets: async function() {
                    var myHeaders = new Headers();
                    myHeaders.append("Authorization", "Bearer ");
                    var response = await fetch("https://localhost:5001" + "/manage/wallet/getAll", {
                        method: 'GET',
                        headers: myHeaders,
                        redirect: 'follow'
                    });
                    let result = await response.json();
                    if (result) {
                        if (result.statusCode == 200) {
                            this.mapWallets(result.data.items);
                        }
                        this.wallets.state = result.statusCode;
                    }
                },
                mapWallets: function(walletsResult) {
                    this.wallets.list = walletsResult.map(function(wallet) {
                        return {
                            id: wallet.id,
                            seed: wallet.seed,
                            createdDateTime: {
                                dateTime: wallet.createdDateTime,
                                persianDateTime: new persianDate(wallet.createdDateTime).format('dddd, DD MMMM YYYY - HH:mm')
                            },
                            owner: wallet.owner
                        };
                    });
                    this.setupTooltip()
                },
                setupTooltip: function() {
                    setTimeout(function() {
                        var tooltipTriggerList = [].slice.call(document.querySelectorAll('[title]'))
                        var tooltipList = tooltipTriggerList.map(function(tooltipTriggerEl) {
                            return new bootstrap.Tooltip(tooltipTriggerEl)
                        })
                    }, 10)
                }
            }
        });
    </script>
}